# /actions:roadmap-update - Intelligent Dashboard Update System

**31/07/2025** | Automated ROADMAP_REGISTRY.md synchronization with real project state

## AUTORIDAD SUPREMA
@context/architecture/core/truth-source.md â†’ Actions implement systematic roadmap intelligence per user vision

## COMMAND DEFINITION
```bash
/actions:roadmap-update
```

## CORE FUNCTIONALITY

### Automatic State Synchronization
- **GitHub Issues Sync**: Real-time status updates (OPEN/CLOSED) via gh CLI
- **Work Items Progress**: Calculate completion based on file changes and commits  
- **Violations Analysis**: Execute analyze_violations.sh for current metrics
- **Dependency Detection**: Identify automatic unblocking opportunities

### Intelligence Features
- **Change Detection**: Compare current vs previous state for delta reporting
- **Progress Calculation**: Real progress metrics based on actual file state
- **Unblocking Detection**: Automatic identification when dependencies resolve
- **Quality Validation**: Dashboard integrity and consistency verification

### Data Integration Sources
- **GitHub API**: Issue status, titles, new issues detection
- **Git Repository**: File changes, commit analysis, branch state
- **Violation Scripts**: Current violation counts via analyze_violations.sh
- **File System**: Work item completion validation through file existence

## EXECUTION PROTOCOL

### 1. Pre-Update Validation
```bash
# Backup current dashboard
cp context/roadmap/ROADMAP_REGISTRY.md context/roadmap/ROADMAP_REGISTRY.backup.$(date +%Y%m%d_%H%M%S).md

# Validate prerequisites  
gh auth status || exit 1
[[ -f scripts/analyze_violations.sh ]] || exit 1
```

### 2. Data Collection Phase
```bash
# GitHub issues synchronization
gh issue list --repo nalve/ce-simple --json number,title,state --limit 100

# Violation analysis
./scripts/analyze_violations.sh > /tmp/violations_current.txt

# Git analysis
git log --oneline --since="1 week ago"
git status --porcelain
```

### 3. Analysis & Update Phase
- **Issue Status Sync**: Update OPEN/CLOSED states maintaining categorization
- **Work Item Progress**: Calculate completion percentages based on actual work
- **Violation Metrics**: Update P0B-CLEANUP progress based on real violation count
- **Dependency Analysis**: Detect when blocking work items complete

### 4. Dashboard Generation
- **Structure Preservation**: Maintain existing format and manual content
- **Dynamic Updates**: Refresh only data-driven sections
- **Consistency Validation**: Ensure cross-references remain accurate
- **Quality Gates**: Validate dashboard integrity before final update

## IMPLEMENTATION INTEGRATION

### Script Integration
- **analyze_violations.sh**: Primary violation metrics source
- **gh CLI**: GitHub synchronization authority
- **Git commands**: Repository state analysis
- **File validation**: Work item completion detection

### Dashboard Sections Updated
- **ðŸš€ ROADMAP WORK ITEMS**: Progress percentages and status updates
- **ðŸŽ« GITHUB ISSUES STATUS**: Real-time issue state synchronization
- **ðŸ“Š SUMMARY**: Automated metrics and progress calculations
- **ðŸŽ¯ NEXT ACTIONS**: Dynamic priority updates based on current state

### Manual Content Preserved
- **Density Analysis**: Manual complexity assessments maintained
- **Methodology Text**: Planning logic and execution descriptions preserved
- **Authority Chains**: Supreme authority and reference architecture maintained
- **Commentary**: Strategic analysis and reasoning preserved

## QUALITY ASSURANCE

### Validation Requirements
- **Format Consistency**: Dashboard structure and markdown formatting preserved
- **Data Accuracy**: All metrics reflect actual project state
- **Reference Integrity**: Cross-references and links remain functional
- **Authority Preservation**: User authority and vision statements maintained

### Error Handling
- **Rollback Capability**: Automatic reversion if validation fails
- **Partial Updates**: Graceful handling of partial data availability
- **Conflict Resolution**: Merge current manual changes with automated updates
- **Alert System**: Clear reporting of any issues during update process

## SUCCESS CRITERIA

### Automation Goals
- âœ… Zero manual intervention required for standard updates
- âœ… Real-time reflection of project state in dashboard
- âœ… Automatic detection of work item completion
- âœ… Proactive identification of unblocking opportunities

### Quality Standards
- âœ… 100% accuracy in issue status synchronization
- âœ… Preserved manual content and strategic analysis
- âœ… Maintained dashboard readability and structure
- âœ… Complete audit trail of changes made

---

**ACTIONS AUTHORITY**: Intelligent dashboard automation serving user vision through systematic real-time synchronization while preserving strategic intelligence and manual insight.
