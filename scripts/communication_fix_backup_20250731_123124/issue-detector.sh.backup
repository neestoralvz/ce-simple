#!/bin/bash

# issue-detector.sh - Automatic Issue Detection and Creation
# Authority: @context/architecture/orchestration.md + .claude/commands/core.md step 18d
# Purpose: Systematic detection and creation of GitHub issues for scope expansion tasks

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
LOG_FILE="$PROJECT_ROOT/scripts/logs/issue_detector_$(date +%Y%m%d_%H%M%S).log"
ISSUES_DIR="$PROJECT_ROOT/.claude/discovered_issues"

# Create necessary directories
mkdir -p "$(dirname "$LOG_FILE")"
mkdir -p "$ISSUES_DIR"

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    log "ERROR: $1"
    exit 1
}

# Banner
log "=========================================="
log "ISSUE DETECTOR - AUTOMATIC SCOPE MANAGEMENT"
log "Authority: Enhanced Scope Management Protocol (core.md 18a-18f)"
log "=========================================="

# Task classification function
classify_task() {
    local task_description="$1"
    local estimated_lines="${2:-0}"
    local complexity_indicators="${3:-}"
    
    # Classification logic based on multiple factors
    local priority="LOW"
    local timeline="<1 day"
    local classification="MICRO-TASK"
    
    # Analyze task description for complexity indicators
    if [[ "$task_description" =~ (architecture|system|framework|integration|coordination) ]]; then
        classification="COMPLEX-TASK"
        priority="MEDIUM"
        timeline="1-3 days"
    fi
    
    if [[ "$task_description" =~ (major|redesign|overhaul|complete|comprehensive) ]]; then
        classification="FUTURE-ENHANCEMENT"
        priority="MEDIUM"
        timeline=">3 days"
    fi
    
    # Analyze estimated work size
    if [[ $estimated_lines -gt 100 ]]; then
        classification="COMPLEX-TASK"
        priority="MEDIUM"
        timeline="1-3 days"
    fi
    
    if [[ $estimated_lines -gt 300 ]]; then
        classification="FUTURE-ENHANCEMENT"
        priority="MEDIUM"
        timeline=">3 days"
    fi
    
    # Check for high-priority indicators
    if [[ "$task_description" =~ (critical|urgent|blocking|security|authority) ]]; then
        priority="HIGH"
    fi
    
    echo "$classification|$priority|$timeline"
}

# Issue template generation
generate_issue_template() {
    local title="$1"
    local description="$2"
    local classification="$3"
    local priority="$4"
    local timeline="$5"
    local context_link="$6"
    local scope_expansion="$7"
    
    cat << EOF
# $title

**Discovery Context**: $context_link
**Classification**: $classification
**Priority**: $priority
**Estimated Timeline**: $timeline

## Discovery Details
- **Scope Expansion**: ${scope_expansion}% - Discovered during execution
- **Discovery Point**: $(date '+%Y-%m-%d %H:%M:%S')
- **Original Context**: Task discovered while working on main objectives

## Task Description
$description

## Acceptance Criteria
- [ ] Complete task implementation
- [ ] Validate system integration
- [ ] Update relevant documentation
- [ ] Verify no regression in existing functionality

## Context References
- **Conversation**: $context_link
- **Related Files**: [To be determined during implementation]
- **Dependencies**: [To be analyzed during planning]

## Implementation Notes
- Discovered task requiring separate attention
- Can be executed independently of original workflow
- Classified as $classification based on complexity analysis

---
**Auto-generated by issue-detector.sh** | **Context**: $(basename "$context_link")
EOF
}

# Create GitHub issue
create_github_issue() {
    local title="$1"
    local body_file="$2"
    local priority="$3"
    local classification="$4"
    
    # Determine labels based on classification and priority
    local labels="discovered-task,$priority"
    
    case "$classification" in
        "MICRO-TASK")
            labels="$labels,micro-task,quick-win"
            ;;
        "COMPLEX-TASK")
            labels="$labels,complex-task,coordination"
            ;;
        "FUTURE-ENHANCEMENT")
            labels="$labels,enhancement,future"
            ;;
    esac
    
    # Create issue using gh CLI
    if command -v gh >/dev/null 2>&1; then
        local issue_url
        issue_url=$(gh issue create \
            --title "$title" \
            --body-file "$body_file" \
            --label "$labels" \
            --assignee "@me" 2>/dev/null) || {
            log "WARNING: Failed to create GitHub issue, saving locally"
            echo "ISSUE_FILE: $body_file"
            return 1
        }
        
        log "✅ GitHub issue created: $issue_url"
        echo "$issue_url"
        return 0
    else
        log "WARNING: gh CLI not available, saving issue locally"
        echo "ISSUE_FILE: $body_file"
        return 1
    fi
}

# Detect scope expansion from TodoWrite
detect_scope_expansion() {
    local original_task_count="${1:-5}"
    local current_todo_file="${2:-}"
    
    if [[ -z "$current_todo_file" || ! -f "$current_todo_file" ]]; then
        log "No TodoWrite file provided for scope analysis"
        return 0
    fi
    
    # Count current tasks in TodoWrite
    local current_task_count
    current_task_count=$(grep -c '"status":' "$current_todo_file" 2>/dev/null || echo "0")
    
    # Calculate scope expansion percentage
    local expansion_percentage=0
    if [[ $original_task_count -gt 0 ]]; then
        expansion_percentage=$(( (current_task_count - original_task_count) * 100 / original_task_count ))
    fi
    
    log "Scope Analysis: Original=$original_task_count, Current=$current_task_count, Expansion=${expansion_percentage}%"
    
    if [[ $expansion_percentage -gt 20 ]]; then
        log "⚠️  Scope expansion detected: ${expansion_percentage}% (threshold: 20%)"
        echo "$expansion_percentage"
        return 0
    else
        log "✅ Scope within limits: ${expansion_percentage}%"
        return 1
    fi
}

# Process discovered tasks from input
process_discovered_tasks() {
    local context_link="$1"
    local scope_expansion="$2"
    shift 2
    local tasks=("$@")
    
    local created_issues=0
    local failed_issues=0
    
    for task in "${tasks[@]}"; do
        # Parse task (format: "title|description|estimated_lines")
        IFS='|' read -r title description estimated_lines <<< "$task"
        
        # Set defaults if fields are empty
        title="${title:-Discovered Task}"
        description="${description:-Task discovered during execution requiring separate attention}"
        estimated_lines="${estimated_lines:-0}"
        
        log "Processing discovered task: $title"
        
        # Classify task
        local classification_result
        classification_result=$(classify_task "$description" "$estimated_lines")
        IFS='|' read -r classification priority timeline <<< "$classification_result"
        
        # Generate issue template
        local issue_file="$ISSUES_DIR/issue_$(date +%Y%m%d_%H%M%S)_$(echo "$title" | tr ' ' '_' | tr -cd '[:alnum:]_').md"
        generate_issue_template "$title" "$description" "$classification" "$priority" "$timeline" "$context_link" "$scope_expansion" > "$issue_file"
        
        # Create GitHub issue
        local issue_result
        issue_result=$(create_github_issue "$title" "$issue_file" "$priority" "$classification")
        
        if [[ "$issue_result" =~ ^https:// ]]; then
            created_issues=$((created_issues + 1))
            log "✅ Issue created: $title -> $issue_result"
            # Store issue URL for tracking
            echo "$title|$issue_result|$classification|$priority" >> "$ISSUES_DIR/created_issues.log"
        else
            failed_issues=$((failed_issues + 1))
            log "⚠️  Issue saved locally: $title -> $issue_file"
        fi
    done
    
    log "=========================================="
    log "ISSUE CREATION SUMMARY"
    log "Created GitHub Issues: $created_issues"
    log "Saved Locally: $failed_issues"
    log "Total Processed: $((created_issues + failed_issues))"
    log "=========================================="
    
    return 0
}

# Main execution function
main() {
    local operation="${1:-detect}"
    
    case "$operation" in
        "detect")
            local original_tasks="${2:-5}"
            local todo_file="${3:-}"
            
            if detect_scope_expansion "$original_tasks" "$todo_file"; then
                log "Scope expansion detected - ready for issue creation"
                echo "SCOPE_EXPANSION_DETECTED"
            else
                log "No significant scope expansion detected"
                echo "SCOPE_WITHIN_LIMITS"
            fi
            ;;
        "create")
            local context_link="${2:-conversation_context}"
            local scope_expansion="${3:-25}"
            shift 3
            local tasks=("$@")
            
            if [[ ${#tasks[@]} -eq 0 ]]; then
                error_exit "No tasks provided for issue creation"
            fi
            
            log "Creating issues for ${#tasks[@]} discovered tasks..."
            process_discovered_tasks "$context_link" "$scope_expansion" "${tasks[@]}"
            ;;
        "batch")
            local task_file="${2:-}"
            local context_link="${3:-conversation_context}"
            local scope_expansion="${4:-25}"
            
            if [[ ! -f "$task_file" ]]; then
                error_exit "Task file not found: $task_file"
            fi
            
            log "Processing batch tasks from file: $task_file"
            
            # Read tasks from file and process
            local tasks=()
            while IFS= read -r line; do
                [[ -n "$line" && ! "$line" =~ ^# ]] && tasks+=("$line")
            done < "$task_file"
            
            process_discovered_tasks "$context_link" "$scope_expansion" "${tasks[@]}"
            ;;
        *)
            echo "Usage: $0 {detect|create|batch}"
            echo ""
            echo "Operations:"
            echo "  detect original_tasks [todo_file]     - Detect scope expansion from TodoWrite"
            echo "  create context_link expansion task... - Create issues for discovered tasks"
            echo "  batch task_file context_link expansion - Create issues from batch file"
            echo ""
            echo "Task format for create/batch: 'title|description|estimated_lines'"
            echo ""
            echo "Examples:"
            echo "  $0 detect 5 .claude/current_todos.json"
            echo "  $0 create conv_123 30 'Fix validation|Add input validation|50'"
            echo "  $0 batch discovered_tasks.txt conv_123 25"
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"

log "Issue detector completed. Log: $LOG_FILE"